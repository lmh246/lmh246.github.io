<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[bootstrap基础一]]></title>
    <url>%2F2017%2F04%2F22%2F%E5%9F%BA%E7%A1%80%E4%B8%80%2F</url>
    <content type="text"><![CDATA[文本对齐1234text-left居左对齐text-center居中对齐text-right居右对齐text-justify两端对齐 &lt; !–more–&gt; 列表12list-unstyled去点列表（去编号）list-inline内联列表，即把垂直列表换成水平列表，而且去掉项目符号（编号），保持水平显示。 ==== 代码12345&lt;code&gt;&lt;/code&gt;来显示单行内联代码&lt;pre&gt;&lt;/pre&gt;来显示多行块代码&lt;kbd&gt;&lt;/kbd&gt;来显示用户输入代码pre-scrollable 控制&lt;pre&gt;&lt;/pre&gt;中代码块区域最大高度为340px，一旦超出这个高度，就会在Y轴出现滚动条&lt;kbd class=&quot;pre-scrollable&quot;&gt;&lt;/kbd&gt; 表格123456789101112131415161718192021222324252627282930313233343536373839404142table：基础表格用法：&lt;table class=&quot;table&quot;&gt;…&lt;/table&gt;able-striped：斑马线表格(隔行有一个浅灰色的背景色)用法：&lt;table class=&quot;table table-striped&quot;&gt;…&lt;/table&gt;table-bordered：带边框的表格（所有单元格具有一条1px的边框）用法：&lt;table class=&quot;table table-bordered&quot;&gt;…&lt;/table&gt;table-hover：鼠标悬停高亮的表格用法：&lt;table class=&quot;table table-hover&quot;&gt;…&lt;/table&gt;table-condensed：紧凑型表格（单元格没内距或者内距较其他表格的内距更小）用法：&lt;table class=&quot;table table-condensed&quot;&gt;…&lt;/table&gt;table-responsive：响应式表格(你的浏览器可视区域小于768px时，表格底部会出现水平滚动条。当你的浏览器可视区域大于768px时，表格底部水平滚动条就会消失。)用法：&lt;div class=&quot;table-responsive&quot;&gt;&lt;table class=&quot;table table-bordered&quot;&gt; …&lt;/table&gt;&lt;/div&gt; 表格行（tr）12345active 表示当前活动的信息success 表示成功或者正确的行为info 表示中立的信息或行为warning 表示警告，需要特别注意danger 表示危险或者可能是错误的行为 表单-文本框12 复选框checkbox和单选择按钮radio1234567891011121314151617181920&lt;form role=&quot;form&quot;&gt;&lt;div class=&quot;checkbox&quot;&gt;&lt;label&gt;&lt;input type=&quot;checkbox&quot; value=&quot;&quot;&gt;&lt;/label&gt;&lt;/div&gt;&lt;div class=&quot;radio&quot;&gt;&lt;label&gt;&lt;input type=&quot;radio&quot;&gt;&lt;/label&gt;&lt;/div&gt;&lt;div class=&quot;radio&quot;&gt;&lt;label&gt;&lt;input type=&quot;radio&quot;&gt;&lt;/label&gt;&lt;/div&gt;&lt;/form&gt; 让多个单选按钮水平排列121、如果checkbox需要水平排列，只需要在label标签上添加类名“checkbox-inline”2、如果radio需要水平排列，只需要在label标签上添加类名“radio-inline” 按钮12345678&lt;button class=&quot;btn&quot; type=&quot;button&quot;&gt;基础按钮.btn&lt;/button&gt;&lt;button class=&quot;btn btn-default&quot; type=&quot;button&quot;&gt;默认按钮.btn-default&lt;/button&gt;&lt;button class=&quot;btn btn-primary&quot; type=&quot;button&quot;&gt;主要按钮.btn-primary&lt;/button&gt;&lt;button class=&quot;btn btn-success&quot; type=&quot;button&quot;&gt;成功按钮.btn-success&lt;/button&gt;&lt;button class=&quot;btn btn-info&quot; type=&quot;button&quot;&gt;信息按钮.btn-info&lt;/button&gt;&lt;button class=&quot;btn btn-warning&quot; type=&quot;button&quot;&gt;警告按钮.btn-warning&lt;/button&gt;&lt;button class=&quot;btn btn-danger&quot; type=&quot;button&quot;&gt;危险按钮.btn-danger&lt;/button&gt;&lt;button class=&quot;btn btn-link&quot; type=&quot;button&quot;&gt;链接按钮.btn-link&lt;/button&gt; 按钮大小1234btn-lg大型按钮btn-sm小型按钮btn-xs超小型按钮btn-block充满整个容器 禁用按钮 添加disabled类（//不会禁止默认行为） 使用disabled=”disabled”属性（会禁止默认行为） 图片1234561、img-responsive：响应式图片，主要针对于响应式设计2、img-rounded：圆角图片3、img-circle：圆形图片4、img-thumbnail：缩略图片用法：&lt;img src=&quot;&quot; class=&quot;img-rounded&quot;&gt; 图标使用方法1&lt;span class=&quot;glyphicon glyphicon-search&quot;&gt;&lt;/span&gt; 图标代码网址]]></content>
      <categories>
        <category>bootstrap</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[bootstrap网格]]></title>
    <url>%2F2017%2F04%2F22%2F%E7%BD%91%E6%A0%BC%2F</url>
    <content type="text"><![CDATA[一.用法1. 数据行(.row)必须包含在容器（.container）中，以便为其赋予合适的对齐方式和内距(padding)123&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt;&lt;/div&gt;&lt;/div&gt; &lt; !–more–&gt; 标号为2的那一行，每一列拥有左边距（padding-left）与右边距(padding-right)，并且都为15px，所以整体那一个布局就有15px与15px的左右边距。 如果放在类名为row的div中，那么那个类名会自动添加margin-left与margin-right属性，来抵消整体的左右内边距2、在行(.row)中可以添加列(.column)，但列数之和不能超过平分的总列数（一般在bootstrap中为12列）常用类型4,8型 123456&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4&quot;&gt;.col-md-4&lt;/div&gt; &lt;div class=&quot;col-md-8&quot;&gt;.col-md-8&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 4,4,4型1234567&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4&quot;&gt;.col-md-4&lt;/div&gt; &lt;div class=&quot;col-md-4&quot;&gt;.col-md-8&lt;/div&gt; &lt;div class=&quot;col-md-4&quot;&gt;.col-md-8&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 3,6,6型1234567&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-3&quot;&gt;.col-md-4&lt;/div&gt; &lt;div class=&quot;col-md-6&quot;&gt;.col-md-8&lt;/div&gt; &lt;div class=&quot;col-md-3&quot;&gt;.col-md-8&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 3、具体内容应当放置在列容器（column）之内，而且只有列（column）才可以作为行容器(.row)的直接子元素特性1.列偏移 在列元素上添加类名col-md-offset-*(其中星号代表要偏移的列组合数) 1234567&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-md-4&quot;&gt;.col-md-4&lt;/div&gt; &lt;div class=&quot;col-md-2 col-md-offset-4&quot;&gt;列向右移动四列的间距&lt;/div&gt; &lt;div class=&quot;col-md-2&quot;&gt;.col-md-3&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 注意：==偏移的列数加上自己的列数不能超过12== 2列排序交换两个列的位置 右移col-md-push-* 左移col-md-pull-* 星号都代表了要移动的列数]]></content>
      <categories>
        <category>bootstrap</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[事件处理程序]]></title>
    <url>%2F2017%2F04%2F08%2F%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%2F</url>
    <content type="text"><![CDATA[事件处理程序1. HTML事件处理程序123456HTML中的代码&lt;input type=&quot;button&quot; value=&quot;按钮&quot; onclick=&quot;showmes()&quot;&gt;javascript代码function showmes()&#123; alert(&quot;123&quot;);&#125; 缺点是：这个改函数不方便，改一个函数不仅要在HTML代码中改变，还需要在JavaScript代码中修改，这造成了一种生活负担。&lt; !–more–&gt; 2.dom0级1234567HTML中的代码&lt;input type=&quot;button&quot; value=&quot;按钮&quot; id=&quot;btn&gt;javascript代码var btn = document.getElementById(&quot;btn&quot;);btn.onclick = function()&#123; alert(&quot;123&quot;);&#125; 缺点：不能同时绑定多个相同的事件，不然这个事件就会被覆盖，直接执行最后一个事件优点：可以绑定多个不同的事件，可以兼容浏览器 3.dom2级chorme,firefox浏览器中 12345678910111213141516添加事件使用addEventListener(type,function,false)其中type指的是类似onclick，onmouseover这类的函数，不过不加“on”function指的是自己定义的要执行的函数false表示是否进行捕获事件，false代表冒泡事件，true代表捕获事件HTML中的代码&lt;input type=&quot;button&quot; value=&quot;按钮&quot; id=&quot;btn&gt;javascript中的代码var btn = document.getElementById(&quot;btn&quot;);function showmes()&#123; alert(&quot;123&quot;);&#125;btn.addEventListener(&quot;click&quot;,showmes,false);删除事件使用removeEventListener(type,function,false) 在IE中 1234567891011121314151617添加事件使用attachEvent(type,function)其中type指的是类似onclick，onmouseover这类的函数，需注意的是“on”不能够省略function指的是自己定义的要执行的函数由于在IE默认使用了冒泡事件，所以不再需要falseHTML中的代码&lt;input type=&quot;button&quot; value=&quot;按钮&quot; id=&quot;btn&gt;javascript中的代码var btn = document.getElementById(&quot;btn&quot;);function showmes()&#123; alert(&quot;123&quot;);&#125;btn.attachEvent(&quot;click&quot;,showmes);删除事件使用detachEvent(type,function) 总结由于你不知道用户使用的是哪种浏览器，所以要对这三种添加事件的方式进行封装； 12345678910111213141516171819202122232425262728293031323334var btn = document.getElementById(&quot;btn&quot;);//获取btn//定义一个对象，其中给予他两个函数，一个是添加事件，一个是删除事件 var eventutil = &#123; //添加事件函数，通过三个判断函数来实现在不同的浏览器中实现事件的添加 addhandler:function(element,type,handler)&#123; if (element.addEvebtListener) &#123; element.addEvebtListener(type,handler,false); &#125;else if (element.attachEvent) &#123; element.attachEvent(&quot;on&quot;+type,handler); &#125;else&#123; element[&quot;on&quot;+type]=handler; //由于不能够使用element.&quot;on&quot;+type这种形式在创建函数，而我们有知道element.onclic===element[&quot;onclick&quot;]所以我们通过中括号 这种方式来创建函数 &#125; &#125;, removehandler:function(element,type,handler)&#123; if (element.removeEvebtListener) &#123; element.removeEvebtListener(type,handler,false); &#125;else if (element.detachEvent) &#123; element.detachEvent(&quot;on&quot;+type,handler); &#125;else&#123; element[&quot;on&quot;+type]=null; &#125; &#125; &#125; function showmes()&#123; alert(&quot;133&quot;); &#125; //进行事件的添加 eventutil.addhandler(btn,&quot;click&quot;,showmes); //进行事件的删除 eventutil.removehandler(btn,&quot;click&quot;,showmes);]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[事件对象（运用事件处理中的函数）]]></title>
    <url>%2F2017%2F04%2F08%2F%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[事件对象（运用事件处理中的函数）1.DOM中的对象 type属性，用于获取事件类型123456789&lt;input type=&quot;button&quot; value=&quot;anniu&quot; id=&quot;btn&quot;&gt; var btn = document.getElementById(&quot;btn&quot;); function show(event)&#123; alert(event.type); &#125; btn.addEventListener(&quot;click&quot;,show,false);//弹出结果为click &lt; !–more–&gt;2.target属性，用于获取事件目标 123456789&lt;input type=&quot;button&quot; value=&quot;anniu&quot; id=&quot;btn&quot;&gt; var btn = document.getElementById(&quot;btn&quot;); function show(event)&#123; alert(event.target); &#125; btn.addEventListener(&quot;click&quot;,show,false);//弹出结果为objext htmlinputelement 3.事件冒泡，从最和内层的元素逐渐到它最外层的父元素 123456789101112131415&lt;div id=&quot;div1&quot;&gt; &lt;input type=&quot;button&quot; value=&quot;anniu&quot; id=&quot;btn&quot;&gt;&lt;/div&gt; var btn = document.getElementById(&quot;btn&quot;); var div1 = document.getElementById(&quot;div1&quot;); function show2()&#123; alert(&quot;div1&quot;) &#125; function show(event)&#123; alert(event.target); &#125; //给div和input添加点击事件 btn.addEventListener(&quot;click&quot;,show,false); div1.addEventListener(&quot;click&quot;,show2,false); //输出结果是当点击按钮时他会首先弹出event.target的内容，然后在弹出div1 但是我们有时候想阻止冒泡，便需要用到stopPropagation()方法 123456依旧采用上面的例子，在show函数中添加一句代码function show(event)&#123; alert(event.target); event.stopPropagation(); &#125; //输出结果就只有event.target的内容； 4.在超链接中，有时我们点击了并不想使它跳转到另一个界面，我们就可以使用阻止事件默认行为的函数preventDefault() 123456&lt;a href=&quot;i.html&quot; id=&quot;go&quot;&gt;go&lt;/a&gt; var go = document.getElementById(&quot;go&quot;); function stop(event)&#123; event.preventDefault(); &#125; go.addEventListener(&quot;click&quot;,stop,false); 2.IE中的对象1.type属性，用于获取事件类型2.srcElement属性，用于获取事件的目标3.cancelBubble属性，用于取消冒泡，这并不是一个方法，当它设置为true，取消冒泡，设置为false允许冒泡4.returnValue属性，阻止事件默认行为，设置为false表示阻止事件默认行为 将IE与IE兼容 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980&lt;div id=&quot;div&quot;&gt;&lt;input type=&quot;button&quot; id=&quot;btn&quot;&gt;&lt;/div&gt; var btn = document.getElementById(&quot;btn&quot;);//获取btn var div1 = document.getElementById(&quot;div&quot;) //定义一个showmes函数， function showmes(event)&#123; var e = eventutil.getevent(event);//获取事件 alert(eventutil.gettype(e));//弹出事件类型 eventutil.stop(e);//阻止冒泡 &#125; function showmes2()&#123; alert(&quot;div1&quot;) &#125;//定义一个对象，将函数都封装在其中 var eventutil = &#123; //添加事件函数，通过三个判断函数来实现在不同的浏览器中实现事件的添加 addhandler:function(element,type,handler)&#123; if (element.addEvebtListener) &#123; element.addEvebtListener(type,handler,false); &#125;else if (element.attachEvent) &#123; element.attachEvent(&quot;on&quot;+type,handler); &#125;else&#123; element[&quot;on&quot;+type]=handler;//由于不能够使用element.&quot;on&quot;+type这种形式在创建函数，而我们知道element.onclic===element[&quot;onclick&quot;]所以我们通过中括号 这种方式来创建函数 &#125; &#125;, //删除事件函数 removehandler:function(element,type,handler)&#123; if (element.removeEvebtListener) &#123; element.removeEvebtListener(type,handler,false); &#125;else if (element.detachEvent) &#123; element.detachEvent(&quot;on&quot;+type,handler); &#125;else&#123; element[&quot;on&quot;+type]=null; &#125; &#125;,//获取事件，其中event是指chorme之类的浏览器，可以直接使用，而window.event是低版本的IE所用的 getevent:function(event)&#123; return event?event:window.event; &#125;,//阻止默认事件 prevent:function(event)&#123; if (event.preventDefault) &#123;event.preventDefault(); &#125;else&#123; event.returnValue = false; &#125; &#125;,//阻止冒泡事件 stop:function(event)&#123; if (event.stopPropagation) &#123; event.stopPropagation(); &#125;else&#123; event.cancelBubble = true; &#125; &#125;,//获取事件类型 gettype:function(event)&#123; return event.type; &#125;,//获取事件目标 gettarget:function(event)&#123; return event.target||event.srcElement; &#125; &#125; //进行事件的添加 eventutil.addhandler(btn,&quot;click&quot;,showmes); eventutil.addhandler(div1,&quot;click&quot;,showmes2)]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[轮播图的原理]]></title>
    <url>%2F2017%2F04%2F02%2F%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%9A%84%E5%8E%9F%E7%90%86%2F</url>
    <content type="text"><![CDATA[轮播图的原理一系列大小相等的图片平铺，利用CSS布局只显示一张图片，其余的图片隐藏。就是相当于中间有一个div，大小是图片的大小，然后外面有个大的div，包含了所有图片。通过计算偏移量来进行轮播 &lt; !–more–&gt;html代码 123456789101112131415161718192021222324&lt;div id=&quot;container&quot;&gt;&lt;div id=&quot;list&quot;&gt;&lt;a&gt;&lt;img src=&quot;1.jpg&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img src=&quot;2.jpg&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img src=&quot;3.jpg&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img src=&quot;4.jpg&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img src=&quot;5.jpg&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img src=&quot;6.jpg&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;a id=&quot;btnleft&gt;&lt;img src=&quot;左.png&quot; class=&quot;left&quot;&gt;&lt;/a&gt;&lt;a id=&quot;btnright&quot;&gt;&lt;img src=&quot;右.jpg&quot; class=&quot;right&quot;&gt;&lt;/a&gt;&lt;div id=&quot;buttons&quot;&gt;&lt;a&gt;&lt;img src=&quot;1.jpg&quot; class=&quot;button&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img src=&quot;2.jpg&quot; class=&quot;button&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img src=&quot;3.jpg&quot; class=&quot;button&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img src=&quot;4.jpg&quot; class=&quot;button&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img src=&quot;5.jpg&quot; class=&quot;button&quot;&gt;&lt;/a&gt;&lt;a&gt;&lt;img src=&quot;6.jpg&quot; class=&quot;button&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt; CSS部分 注意list的overflow:hidden;只显示窗口的一张图片，把左右两边的都隐藏起来。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748body&#123; padding: 20px; &#125;#container&#123; width: 800px; margin: 0 auto; position: relative; overflow: hidden;&#125;#list&#123; width: 4800px; height: 300px; position: absolute;&#125;#list img&#123; width: 800px; height: 300px; float: left;&#125;.left&#123; position: absolute; margin-top: 150px; width: 50px; height: 50px; opacity:0.5;&#125;.right&#123; position: absolute; margin-top: 150px; margin-left: 750px; width: 50px; height: 50px; opacity:0.5;&#125;.button&#123; width: 120px; height: 80px; margin-top: 450px;&#125;.left:hover&#123; opacity:1;&#125;.right:hover&#123; opacity:1;&#125; JavaScript部分 先实现轮播效果 12345678910111213141516171819202122232425262728293031323334var list = document.getElementById(&quot;list&quot;);//获取6张图片的divvar aimg = list.getElementsByTagName(&quot;a&quot;);//获取6张图片var btnleft = document.getElementById(&quot;btnleft&quot;);//获取左边的按钮var btnright = document.getElementById(&quot;btnright&quot;);//获取右边的按钮var abuttons = document.getElementById(&quot;buttons&quot;).getElementsByTagName(&quot;a&quot;);//获取下方的缩略图var inow = 0; function move(index)&#123; list.style.left = -index*800 + &quot;px&quot;; if (index &gt;aimg.length-1) &#123; index = 0; inow = index;//这是对于右边的按钮的，防止一直按下去是白屏 &#125; if (index&lt; 0) &#123; index = aimg.length-1;//这是对于左边的按钮的，防止一直按下去是白屏 inow = index; &#125;&#125; for (var i = 0; i &lt; abuttons.length; i++) &#123; abuttons[i].index = i;//给每个缩略图一个序号，相当于一个数组 abuttons[i].onclick = function()&#123; //list.style.left = -800*this.index + &quot;px&quot;; move(this.index); &#125; var timer; function play()&#123; timer = setInterval(function()&#123; btnright.onclick()&#125;, 1500)&#125;play(); 这段代码中的move函数，由于不管是轮播还是点击方向键，其本质都是改变div的位置，使它发生位移，从而实现轮播，所以就把它写在了move函数 通过点击方向键改变图片 12345678btnright.onclick = function()&#123; inow++ move(inow); &#125; btnleft.onclick = function()&#123; inow-- move(inow); &#125; 因为你会发现一直点击下去，会出现白屏，没有图片显示，所以在上面的move函数又增加了一个判断语句，是否图片已经轮播完了，但是我这代码出了问题，点到最后还是会出现一张白屏的，不知道怎么修改。 最后在增加一个功能，就是鼠标放到图片上时，停止轮播，离开又继续轮播。 1234567891011//设置鼠标放到图片上时，停止轮播var container = document.getElementById(&quot;container&quot;);function stop()&#123; clearInterval(timer);&#125;container.onmouseover = function()&#123; stop();&#125;container.onmouseout = function()&#123; play();&#125; 当然这些JS代码要放在window.onload=function(){}中]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[javascript基本知识]]></title>
    <url>%2F2017%2F04%2F02%2F%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[基本知识1.最好的做法把标签放到html文档的最后，标签之前，这样能使浏览器更快的加载页面&lt; !–more–&gt;2.JavaScript中，变量和其他语法元素都是区分字母大小写的 3.不允许变量名中包含空格和标点符号（$除外），允许包含字母，数字，美元符号，下划线，但是第一个字符不允许是数字 4.对象 123456789101112//创建方法1.直接创建var lennon = Object();lennon.name = &quot;john&quot;;lennon.year = 25;lennon.living = false;2.简洁的方法var lennon = &#123; name:&quot;john&quot;, year:25, living:false&#125; 5.关于+号 123456789拼接字符串var message = &quot;i am feeling&quot;+&quot;happy&quot;;这种拼接也可以通过变量来赋值var mood = &quot;happy&quot;;var message = &quot;i am feeling&quot;+mood;甚至可以将字符串与数字拼接，但是数值会被自动转换为字符串注意：如果字符串与数字拼接，结果是一个更长的字符串；如果拼接两个数值，结果是数值的算术和alert(&quot;10&quot;+20)//1020alert(10+20)//30 6.变量作用域 全局变量：在脚本的任意位置被引用 局部变量：只存在声明它的那个函数的内部，不能在函数的外部引用12345678910111213141516如果在某个函数中使用了var，那个变量被看做局部变量，只存在于函数的上下文中function square(num)&#123; total = num*num; return total;&#125;var total = 50;var number = square(20);alert(total);//400变式function square(num)&#123; var total = num*num; return total;&#125;var total = 50;var number = square(20);alert(total);//50]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[正则的一些要求]]></title>
    <url>%2F2017%2F04%2F02%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[创建一个RegExp的两种方法 隐式创建 var reg=/正则表达式/gi [g表示全局匹配，i表示区别大小写,m考虑换行] 显示创建 var reg = new RegExp(“正则表达式”,”gi”)元字符 {n}，用于指定前面的字符和组合连续出现多少次例如：a{3},(\d){2} 注意1{3}去匹配1111111，结果是111， 111，它先匹配前三个1然后第二次匹配是在剩下的4个1中匹配 {n,m}表示最少匹配n次，最多匹配m次例如3{2，3} 注意1{3，4}匹配111111，结果是1111，111JavaScript中遵循贪婪原则，优先匹配字符多的，因此它首先匹配了1111 ，剩下三个1，组不成4个1 ，因此又匹配出了111&lt; !–more–&gt; 表示匹配出现1次到任意多次 表示匹配出现0次到任意多次 ？ 表示出现0次到1次 【a-z】表示匹配a到z中任意一个字符 【^a-z】表示匹配不是a到z中的任意一个字符 \d表示匹配0-9中的任意一个数字，相当于【0-9】 \D表示匹配不是0-9中的任意一个数字，相当于【^0-9】 \w匹配任意英文字符、数字、下划线，相当于[a-zA-Z0-9_] \W与\w相反 \s匹配任何空白字符（空格，制表符等） \S匹配任何非空白字符 . 匹配出\n之外的所有字符，如果要匹配，本身则需要使用. 定位符^匹配目标字符串的开始位置 $匹配目标字符串的结束位置 要是想要匹配这些字符 . * + () $ / \ ? [] ^ {}需要用到转义符（) 选择匹配符（|）既可以匹配这个，又可以匹配那个]]></content>
  </entry>
  <entry>
    <title><![CDATA[数组]]></title>
    <url>%2F2017%2F04%2F02%2F%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[数组 数组的创建 123456//法一var colors = new Array();var colors = new Array(20);//括号中可以填数组要保存的项目数量，这就是创建了length为20的数组var colors = new Array(&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;);//括号也可以传递数组中应该包含的项//法二数组字面量表示法var colors = [&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;]; &lt; !–more–&gt;2.元素的访问与修改 1234var colors = [&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;];alert(colors[0]);//访问到了red，数组的访问是以0开始的colors[2] = &quot;black&quot;;//将第三项blue修改为了blackcolors[3] = &quot;yellow&quot;;//新增了第四项 3.数组的转换方法 toString() 每个值的字符串表示拼接成了一个字符串，中间以逗号分隔开 toLocalString() 返回值与toString（）方法一样，不同点在于调用每一项的toLocalString()方法 valueOf 与toString一样 12345678910111213141516171819202122232425262728var person1 = &#123; toLocalString : function()&#123; return &quot;Nikolaos&quot;; &#125;, toString : function()&#123; return &quot;Nicholas&quot;; &#125;&#125;;var person2 = &#123; toLocalString : function()&#123; return &quot;Grigorios&quot;; &#125;, toString : function()&#123; return &quot;greg&quot;; &#125;&#125;;var people = [person1,person2];alert(&quot;person&quot;);//Nicholas,Greg,因为alert要接受字符串参数，他会在后台调用toString（）方法alert(people.toString());//Nicholas,Gregalert(people.toLocalString());//Nikolaos,Grigorios//补充一个join（）方法，他接受一个参数，这个参数是用作分隔符的字符串var colors = [&quot;red&quot;, &quot;green&quot;, &quot;yellow&quot;];alert(colors.join(&quot;||&quot;));//red||green||yellow 4.元素的添加 12345678910var colors = new Array();var count = colors.push(&quot;red&quot;,&quot;green&quot;);alert(count);//2 push()方法接收任意参数，并且把他们逐项添加到数组末尾，注意的是他返回的是数组的长度var count2 = colors.unshift(&quot;black&quot;,&quot;blue&quot;);alert(count2); //3 colors[0]=black unshift()方法接收任意参数，并且把他们添加到数组前端，注意的是他返回的是数组的长度，而且如果一次添加多个，它的顺序是从右往左添加splice()方法，向指定位置插入任意数量的项，splice(起始位置，0，&quot;&quot;,&quot;&quot;.....)var colors = [&quot;red&quot;, &quot;green&quot;, &quot;brown&quot;];var removed = colors.splice(1,0,&quot;yellow&quot;,&quot;orange&quot;);alert(colors);//red,yellow,orange,green,yellow 5.元素的删除 123colors.pop()//从数组末尾移除最后一项，返回的是移除的项colors.shift()//移除数组的第一项colos.splice(起始位置，项数)//删除从指定位置开始的项数 6.元素的合并与截取 123456789截取colors.slice(起始位置)//获取指定位置到数组末尾的所有项colors.slice(起始位置，结束位置)//获取起始位置到结束位置之前的所有数组的项注意：要是参数中有负数，则用数组的长度加上该数来确定位置合并var colors = [&quot;red&quot;,&quot;green&quot;];var colors2 = colors.contact(&quot;yellow&quot;,[&quot;black&quot;,&quot;brown&quot;]);alert(colors2);//red,green,yellow,black,brown 7.排序 123456789101112131415161718arr.reverse();//反转数组项对数组元素排序function compare(value1,value2)&#123; if (value1&lt;value2) &#123; return-1; &#125;else if (value1&gt;value2) &#123; return 1; &#125;else&#123; return 0; &#125; &#125; var values = [5,3,9,0,1]; values.sort(compare); alert(values); 8.查找元素 12345678indexOf()从数组的开头开始向后查找lastIndexOf从数组末尾开始向前查找找到返回位置，没找到就返回-1var numbers = [1,2,3,4,5,4,3,2,1]alert(numbers.indexOf(4));//3 这是从前向后找alert(numbers.lastIndexOf(4));//5 从后向前找]]></content>
      <categories>
        <category>javaScript</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[关于弹出层的总结]]></title>
    <url>%2F2017%2F04%2F02%2F%E5%85%B3%E4%BA%8E%E5%BC%B9%E5%87%BA%E5%B1%82%E7%9A%84%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[关于弹出层的总结思路：现在HTML文件中写出登录框，然后为他设置样式，然后就是将代码注释，这是需要在JS文件中点击登录需要创建的&lt; !–more–&gt;HTML 12345678910111213141516&lt;button id=&quot;btnlogin&quot;&gt;登录&lt;/button&gt;&lt;!--&lt;div id=&quot;mask&quot;&gt;&lt;/div&gt;&lt;div id=&quot;login&quot;&gt; &lt;div class=&quot;head&quot;&gt; 登录账号 &lt;div id=&quot;close&quot;&gt;×&lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;contain&quot;&gt; &lt;div class=&quot;user&quot;&gt; 用户名：&lt;span&gt;&lt;input type=&quot;text&quot; placeholder=&quot;用户名/手机/邮箱&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class=&quot;password&quot;&gt;密码： &amp;nbsp; &amp;nbsp;&lt;input type=&quot;password&quot;&gt;&lt;/div&gt; &lt;div class=&quot;submit&quot;&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;--&gt; CSS 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#btnlogin&#123; position: absolute; right: 10px; top: 10px;&#125;#mask&#123; background-color: black; opacity: 0.5;//设置透明度 width: 100%; z-index: 1000;//设置优先级&#125;#login&#123; position: fixed; left: 30%; top: 30%; border: 1px solid black; z-index: 1001;&#125;.head&#123; width: 400px; height: 40px; background-color: #666666; position: relative; text-align: left; line-height: 40px; font-size: 20px; cursor: move;//鼠标放在登录框顶部会变成十字按钮&#125;.contain&#123; width: 400px; height: 250px; position: relative; background-color: white;&#125;#close&#123; width: 30px; height: 30px; cursor: pointer; position: absolute; right: 5px; top: 5px; text-align: center; line-height: 30px; font-size: 25px;&#125;.user, .password, .submit&#123; padding-top: 25px; margin-left: 25px; width: 350px; height: 50px;&#125;.contain input&#123; width: 200px; height: 40px; border: 1px solid black;&#125;.submit input&#123; background-color: #3F89EC;&#125; JS 123456789101112131415161718192021222324252627282930313233window.onload=function()&#123; var obtn = document.getElementById(&quot;btnlogin&quot;);//获取登录按钮 obtn.onclick = function()&#123;//遮罩层 var height = document.body.scrollHeight;//scrollHeight表示元素的总高度，包括由于溢出而无法展示在网页的不可见部分 var width = document.body.scrollWidth; var mask = document.createElement(&quot;div&quot;);//创建div mask.id =&quot;mask&quot;;//给他赋ID为mask mask.style.height = height+&quot;px&quot;;//给他赋高度与宽度 mask.style.width = width+&quot;px&quot;; mask.style.backgroundColor=&quot;black&quot;; document.body.appendChild(mask);//将遮罩层添加到body中//登录 var login = document.createElement(&quot;div&quot;);//创建登录框 login.id = &quot;login&quot;; //可视区域 var wheight = document.documentElement.clientHeight; var wwidth = document.documentElement.clientWidth; login.innerHTML=&quot;&lt;div class=&apos;head&apos;&gt;登录账号&lt;div id=&apos;close&apos;&gt;×&lt;/div&gt;&lt;/div&gt;&lt;div class=&apos;contain&apos;&gt;&lt;div class=&apos;user&apos;&gt;用户名：&lt;span&gt;&lt;input type=&apos;text&apos; placeholder=&apos;用户名/手机/邮箱&apos;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&apos;password&apos;&gt;密码： &amp;nbsp; &amp;nbsp;&lt;input type=&apos;password&apos;&gt;&lt;/div&gt;&lt;div class=&apos;submit&apos;&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;input type=&apos;submit&apos; value=&apos;登录&apos;&gt;&lt;/div&gt;&lt;/div&gt;&quot;//添加HTML中ID为login的div下的代码 document.body.appendChild(login);//将div添加到body中//本身 var dheight = login.offsetHeight;//获取登录框自己的高度与宽度 var dwidth = login.offsetWidth; login.style.left = (wwidth-dwidth)/2+&quot;px&quot;;//使登录框居中 login.style.top = (wheight-dheight)/2+&quot;px&quot;;//设置关闭功能 var oclose=document.getElementById(&quot;close&quot;); mask.onclick=oclose.onclick=function()&#123; document.body.removeChild(mask); document.body.removeChild(login); &#125; &#125; &#125; 做到这一个登录框的基本弹出效果就做的差不多了最后我们给他在增加一个拖拽功能 12345678910111213141516171819202122232425262728293031323334var mouseoffsetx = 0;//偏移var mouseoffsety = 0;var isdraging = false;//定义一个变量表示是否可以拖拽//事件1 计算鼠标相对于登录框左上角的坐标，标记元素为可拖动 document.onmousedown = function(e)&#123; mouseoffsetx = e.pageX-login.offsetLeft;//鼠标相对于整个页面的坐标减去登录框相对于左边的距离 mouseoffsety = e.pageY-login.offsetTop; isdraging = true;//事件2,检测是否标记为移动，是的话更新元素位置到当前位置 document.onmousemove = function(e)&#123; var login1 = document.getElementById(&quot;login&quot;); var mousex = e.pageX; var mousey = e.pageY;//当前位置 var movex = 0; var movey = 0; if (isdraging===true) &#123; movex = mousex - mouseoffsetx; movey = mousey - mouseoffsety;//界限，防止登录框拖拽不见 var maxX = wwidth - dwidth; var maxY = wheight - dheight; movex=(maxX,Math.max(0,movex)); movey=(maxY,Math.max(0,movey)); login1.style.left = movex + &quot;px&quot;; login1.style.top = movey + &quot;px&quot;; &#125; &#125;//事件3，鼠标松开显示不可拖拽 document.onmouseup=function()&#123; isdraging = false; &#125; &#125; 至此一个弹出框的基本效果就已经写完了]]></content>
      <categories>
        <category>组件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F04%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
